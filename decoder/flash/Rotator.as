package {	import flash.display.*	import flash.events.*  import de.popforge.events.*	public class Rotator extends MovieClip {		var _rotationChangeSinceActivated = null		var _lastAngle = null		var _initialDifferenceInAngles = 0		public function Rotator() {		  name = "rotator"		  			buttonMode = true;       mouseChildren = false			SimpleMouseEventHandler.register(this)			addEventListener( SimpleMouseEvent.PRESS, pressHandler)			addEventListener( SimpleMouseEvent.RELEASE, releaseHandler)			addEventListener( SimpleMouseEvent.RELEASE_OUTSIDE, releaseHandler)						addEventListener(Event.ADDED_TO_STAGE, init)		}				function init(e:Event) {      graphics.beginFill(0x000000, 0)      graphics.drawRect(-10, -10, 20, 20)      graphics.endFill()      adjustToStage()		}				public function adjustToStage() {      width = stage.stageWidth      height = stage.stageHeight      x = stage.stageWidth/2      y = stage.stageHeight/2		}			public function pressHandler(event:SimpleMouseEvent):void {	    _rotationChangeSinceActivated = 0	    addEventListener(Event.ENTER_FRAME, enterFrameHandler)		}			public function releaseHandler(event:SimpleMouseEvent):void {	    removeEventListener(Event.ENTER_FRAME, enterFrameHandler)		}    // Tricky rotation/positioning code put together with help from...    // http://www.bezzmedia.com/swfspot/samples/advanced/iPod_Style_Wheel_Slider				private function enterFrameHandler(event:Event):void {  		// Calculate the angle from the center of the wheel to the mouse      var angle:Number = Math.round(Math.atan(mouseY/mouseX)/(Math.PI/180))      angle += (mouseX<0) ? 180 : 0      angle += (mouseX>=0 && mouseY<0) ? 360 : 0            if (_rotationChangeSinceActivated == 0) {        _initialDifferenceInAngles = angle - MovieClip(parent)._bottom.rotation      }  		  // Check if the wheel was active on the last enterframe			// If so, account for when the angle crosses from 0 to 360 or 360 to 0      // _rotationChangeSinceActivated += (_lastAngle!=null && Math.abs(_lastAngle-angle) < 180) ? (_lastAngle - angle) : 0  		// if the angle has changed since the last enterframe, store the current angle 			// so it can be compared to the angle in the next frame      if (_lastAngle != angle) {  		  _lastAngle = angle // - _initialDifferenceInAngles        MovieClip(parent)._bottom.rotation = _lastAngle      }		}					}}